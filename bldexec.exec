/* REXX */
/*********************************************************************/
/*********************************************************************/
/* BLDEXEC  EXEC: Quick shortcut to apply all updates to a file with */
/*                EXECUPDT                                           */
/*                                                                   */
/*      Author  : David Boyes                                        */
/*     License  : BSD                                                */
/*********************************************************************/
/*********************************************************************/
/* Maintenance Log                                                   */
/* Date         Who?                     Description                 */
/* 2020-09-28    DB             Created exec                         */
/* 2020-10-05    DB             Move inline of common routines to    */
/*                              INLINE XEDIT to keep UPDATE happy    */
/*                                                                   */
/*********************************************************************/
/**** Begin Main Program                                          ****/
/*********************************************************************/
 
parse arg argline                     /* snapshot orig cmdline       */
call Set_Default_Constants     /* set some helpful logical constants */
call Parse_Argline argline            /* separate parms from options */
call Parse_Options optionstr          /* get opt values and validate */
call Supply_WS_Vars                   /* build useful variables      */
call File_Exists basefile             /* check if base file exests   */
rc1 = rc                              /* save rc from 1st chk        */
call File_Exists cntrlfile            /* check for cntrlfile         */
rc2 = rc                              /* save rc from 2nd chk        */
call Build_Exec                       /* build input from EXECUPDT   */
say execname 'built on disk' fm
call End_Program
exit rc
 
/*********************************************************************/
/**** Subroutines                                                 ****/
/*********************************************************************/
 
/*********************************************************************/
Set_Default_Constants:        /* set constants if any                */
/*********************************************************************/
                                      /* Return Codes:               */
                                      /* 0 = success (always)        */
  RX_OK = 0                           /* symbolic for REXX OK rc     */
  RX_FAIL = 28                        /* symbolic for REXX fail      */
  RX_NULL_STR = 4                     /* null string                 */
  rc = RX_OK                          /* return RX_OK                */
return rc                             /* end routine                 */
 
/*********************************************************************/
Parse_Argline:                /* parse argline according to pattern  */
/*********************************************************************/
                                      /* Return Codes:               */
  parse arg argline                   /* 0 = success (always)        */
  parse var argline execname fm '(' , /* pattern for parse           */
    optionstr                         /*                             */
  rc = RX_OK                          /* always exit successfuly     */
return rc                             /* end routine                 */
 
/*********************************************************************/
Parse_Options:                /* parse option string if supplied     */
/*********************************************************************/
                                      /* Return Codes:               */
                                      /* 0 = success (always)        */
  parse var optionstr option .        /* parse pattern               */
  upper option                        /* uppercase option            */
  no_options = false                  /* init flag default           */
  option_metadata = false             /* init flag default           */
  select                              /* option possiblities         */
    when option = '' then do          /* no options present          */
      no_options = true               /* flag it                     */
      rc = RX_OK                      /* exit RX_OK                  */
      end                             /* skip                        */
    when abbrev(option,'METADATA') ,  /* check for METADATA opt      */
      then do                         /*                             */
      option_metadata = true          /* got it                      */
      rc = RX_OK                      /* exit RX_OK                  */
      end                             /* skip                        */
    otherwise do                      /* invalid option              */
      rc = RX_FAIL                    /* exit rc = 28                */
      end                             /* end otherwise               */
  end                                 /* end select                  */
return rc                             /* end routine                 */
 
/*********************************************************************/
Supply_WS_Vars:               /* supply defaults for all input parms */
                              /* and/or useful variables             */
/*********************************************************************/
                                      /* Return Codes:               */
                                      /* 0 = success (always)        */
 
basefile = execname '$EXEC' fm        /* base filespec               */
cntrlfile = execname 'CNTRL' fm       /* control filespec            */
rc = RX_OK                            /* success                     */
return rc                             /* end routine                 */
 
/*********************************************************************/
File_Exists:                          /* does file exist?            */
/*********************************************************************/
                                      /* Return Codes:               */
                                      /* 0 = file exists             */
                                      /* 28 = file not found         */
  parse arg fn ft fm                  /* get parameters              */
  filespec = fn ft fm                 /* construct filespec          */
  'SET CMSTYPE HT'                    /* silence please              */
  'LISTFILE' filespec                 /* search for file             */
  src = rc                            /* save rc                     */
  'SET CMSTYPE RT'                    /* resume output               */
  if src ^= 0 then do                 /* not exist or error          */
    rc = src                          /* returned saved rc           */
    end                               /* end if                      */
  else rc = RX_OK                     /* otherwise file exists       */
  return rc                           /* end routine                 */
 
/*********************************************************************/
End_Program:                  /* cleanup and exit                    */
/*********************************************************************/
                                      /* Return Codes:               */
                                      /* 0 = success (always)        */
rc = RX_OK                            /* ok, bye                     */
return rc                             /* end routine                 */
 
/*********************************************************************/
Set_Global_Maclib:                      /* global exec maclib        */
/*********************************************************************/
                                      /* arg: maclib to be globaled  */
                                      /* Return codes:               */
                                      /* 0 = success                 */
                                      /* 28 = file not found         */
                                      /* sets var execlib            */
 
  parse arg maclib_to_add             /* get name                    */
  'PIPE CMS QUERY MACLIB' ,           /* get current maclib list     */
      '| VAR' current_maclib_list     /* and store it                */
  parse var current_maclib_list ,
       . . current_maclib_list
 
  call File_Exists maclib_to_add 'MACLIB *'  /* check for file exits */
 
  if rc=RX_FAIL then do               /* not found                   */
       say 'Missing file' maclib_to_add 'MACLIB'                 /*  */
       rc=RX_FAIL
  end
  if rc=RX_OK then do                 /* found it                    */
     new_maclib_list = maclib_to_add current_maclib_list
     'PIPE CMS GLOBAL MACLIB' new_maclib_list        /* set new list */
     execlib = maclib_to_add          /* set symbolic for movefile   */
     rc=RX_OK                         /* all golden                  */
  end
return rc                             /* exit routine                */
 
 
/*********************************************************************/
Build_Exec:                           /* build the exec              */
/*********************************************************************/
 'EXECUPDT' execname 'EXEC ( CTL' execname     /* build from updates */
return rc                             /* End Routine                 */
 
